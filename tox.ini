[tox]
envlist = py3{6,7,8,9}-build
skip_missing_interpreters = true
skipsdist = true

[base]
setenv =
    {abc,demo,soname,tests}: CFLAGS=-march=native -O2 -g -DNDEBUG
    {abc,demo,soname,tests}: CXXFLAGS={env:CFLAGS:-march=native -O2 -g -DNDEBUG}
    {abc,demo,soname,tests}: LDFLAGS={env:CFLAGS:-march=native -O2 -g -DNDEBUG -Wl,-O1 -Wl,--as-needed}
    {base,build}: PREFIX={env:PREFIX:./install}

passenv =
    CC
    CXX
    LD
    AR
    NM
    PYTHON
    DISPLAY
    XAUTHORITY
    HOME
    USERNAME
    USER
    CI
    XDG_*
    GITHUB*
    PIP_DOWNLOAD_CACHE

[testenv]
envdir = {toxinidir}/.env
skip_install = true

setenv =
    {abc,tests}: {[base]setenv}
    {build}:  {[base]setenv}

passenv =
    {[base]passenv}

whitelist_externals =
    {abc,demo,soname,tests,lint,base,build,clang,ctest,grind,unbuild}: bash
    {abc,demo,soname,tests,clean}: make

changedir =
    {build,clang}: build

deps =
    {abc,demo,soname,tests,lint,base,build,clang,ctest,grind,ctestwin}: pip>=21.3
    {abc,demo,soname,tests}: this-cli
    {base,build,clang,ctest,grind,ctestwin}: cmake
    {base,build,clang,ctest,grind,ctestwin}: ninja
    lint: cpplint
    grind: ValgrindCI
    lcov: lcov_cobertura

commands_pre =
    {build,clang}: cmake -E make_directory {toxinidir}/build

commands =
    abc: make -j4 ABC_USE_PIC=1 {posargs} abc
    abc: make -j4 {posargs} libabc.a
    soname: make -j4 ABC_USE_PIC=1 ABC_USE_SONAME=1 {posargs} lib
    tests: make test
    demo: bash -c '$CC {posargs} -Wall -c src/demo.c -o demo.o'
    demo: bash -c '$CXX -o demo demo.o libabc.a -lm -ldl -lreadline -lpthread'
    demo: ./demo i10.aig
    {abc,soname,tests}: bash -c 'ls -lh *abc* demo || true'
    base: bash -c 'cmake -G {posargs:"Ninja"} -DCMAKE_BUILD_TYPE=Release -DABC_USE_NAMESPACE=xxx -DCMAKE_INSTALL_PREFIX=./staging -S . -B build'
    base: cmake --build build
    base: cmake --build build --target install
    build: bash -c 'cmake -G {posargs:"Unix Makefiles"} -DCMAKE_BUILD_TYPE=Debug -DABC_USE_NAMESPACE=xxx -DABC_ENABLE_LTO=ON -DBUILD_SHARED_LIBS=ON -DABC_USE_SONAME=ON -DCMAKE_INSTALL_PREFIX=$PREFIX ..'
    clang: bash -c 'cmake -G {posargs:"Unix Makefiles"} -DCMAKE_BUILD_TYPE=RelWithDebInfo -DABC_USE_NAMESPACE=xxx -DCOVERAGE_BUILD=ON -DBUILD_SHARED_LIBS=OFF ..'
    {build}: bash -c 'cmake --build . -j $(nproc)'
    {clang}: bash -c 'cmake --build . --target coverage -j $(nproc)'
    {build}: bash -c 'ctest -V -C Debug --test-dir ./'
    {clang}: bash -c 'ctest -V -C RelWithDebInfo --test-dir ./'
    lcov: lcov_cobertura build/coverage/lcov.info --base-dir {toxinidir}/src --output coverage.xml
    build: cmake --build . --target install
    build: bash -c 'find install/ -type f -name \*abc\* -o -name demo | xargs ls -lh'
    ctest: bash -c 'ctest -j $(nproc) --build-generator {posargs:"Ninja"} --build-and-test . build --build-options -DABC_USE_NAMESPACE=xxx -DABC_SKIP_EXE=ON -DCMAKE_BUILD_TYPE=Release --test-command ctest --rerun-failed --output-on-failure -V'
    ctestwin: ctest --build-generator {posargs:"Visual Studio 16 2019"} --build-and-test . build --build-options -DBUILD_SHARED_LIBS=ON -DABC_USE_NO_PTHREADS=ON -DABC_USE_NO_READLINE=ON -DCMAKE_BUILD_TYPE=Debug --test-command ctest --rerun-failed --output-on-failure -V
    ctest: bash -c 'ls -lh build/src/base/main/abc build/libabc.*'
    lint: bash -c 'cpplint --output=gsed {toxinidir}/src/base/main/* {toxinidir}/lib/*'
    grind: bash -c 'cmake -G {posargs:"Ninja"} -S . -B build -DCMAKE_BUILD_TYPE=Debug'
    grind: bash -c 'cmake --build build --target abc -j $(nproc)'
    grind: bash -c 'valgrind --tool=memcheck --xml=yes --xml-file=abc_check.xml --leak-check=full --show-leak-kinds=definite,possible --error-exitcode=127 ./build/src/base/main/abc "-c" "r i10.aig; b; ps; b; rw -l; rw -lz; b; rw -lz; b; ps; cec"'
    grind: valgrind-ci abc_check.xml --number-of-errors
    grind: valgrind-ci abc_check.xml --summary
    unbuild: bash -c 'rm -rf build/ *.xml *.blif *.profraw'
    clean: make clean
